version: 2.0

flake8-steps: &steps
  - checkout
  - run: sudo pip install flake8
  - run: ./bin/flake8_tests.sh
jobs:
  python-flake8-tests:
    docker:
      - image: circleci/python:3.7.0
    steps: *steps
  legacy-python-flake8-tests:
    docker:
      - image: circleci/python:2.7.15
    steps: *steps
  backend-unit-tests:
    environment:
      COMPOSE_FILE: .circleci/docker-compose.circle.yml
      COMPOSE_PROJECT_NAME: redash
    docker:
      - image: circleci/buildpack-deps:xenial
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build Docker Images
          command: |
            set -x
            docker-compose build --build-arg skip_ds_deps=true
            docker-compose up -d
            sleep 10
      - run:
          name: Create Test Database
          command: docker-compose run --rm postgres psql -h postgres -U postgres -c "create database tests;"
      - run:
          name: Run Tests
          command: docker-compose run --name tests redash tests --junitxml=junit.xml --cov-report xml --cov=redash --cov-config .coveragerc tests/
      - run:
          name: Copy Test Results
          command: |
            mkdir -p /tmp/test-results/unit-tests
            docker cp tests:/app/coverage.xml ./coverage.xml
            docker cp tests:/app/junit.xml /tmp/test-results/unit-tests/results.xml
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: coverage.xml
  frontend-lint:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run: mkdir -p /tmp/test-results/eslint
      - run: npm install
      - run: npm run lint:ci
      - store_test_results:
          path: /tmp/test-results
  frontend-unit-tests:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run: sudo apt install python-pip
      - run: sudo pip install -r requirements_bundles.txt -r requirements.txt
      - run: npm install
      - run: npm run bundle
      - run: npm test
      - run: npm run lint
  build-tarball:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run: sudo apt install python-pip
      - run: sudo pip install -r requirements_bundles.txt  -r requirements.txt
      - run: npm install
      - run: .circleci/update_version
      - run: npm run bundle
      - run: npm run build
      - run: rm -rf ./node_modules/
      - run: .circleci/pack
      - store_artifacts:
          path: /tmp/artifacts/
  build-docker-image:
    docker:
      - image: circleci/buildpack-deps:xenial
    steps:
      - setup_remote_docker
      - checkout
      - run: sudo apt install python-pip npm
      - run: sudo pip install -r requirements_bundles.txt  -r requirements.txt
      - run: .circleci/update_version "master"
      - run: npm run bundle
      - run: .circleci/docker_build "master"
  build-docker-image-rc:
    docker:
      - image: circleci/buildpack-deps:xenial
    steps:
      - setup_remote_docker
      - checkout
      - run: sudo apt install python-pip npm
      - run: sudo pip install -r requirements_bundles.txt  -r requirements.txt
      - run: .circleci/update_version "rc"
      - run: npm run bundle
      - run: .circleci/docker_build "rc"
  build-docker-image-tag:
    docker:
      - image: circleci/buildpack-deps:xenial
    steps:
      - setup_remote_docker
      - checkout
      - run: sudo apt install python-pip npm
      - run: sudo pip install -r requirements_bundles.txt  -r requirements.txt
      - run: .circleci/update_version "$CIRCLE_TAG"
      - run: npm run bundle
      - run: .circleci/docker_build "$CIRCLE_TAG"
      # Create alias from tag to "latest":
      - run: docker tag $DOCKERHUB_REPO:$CIRCLE_TAG $DOCKERHUB_REPO:latest
      - run: docker push $DOCKERHUB_REPO:latest
workflows:
  version: 2
  build:
    jobs:
      - python-flake8-tests
      - legacy-python-flake8-tests
      - backend-unit-tests:
          filters:
            tags:
              only: /^m[0-9]+(\.[0-9]+)?$/
      - frontend-lint:
          filters:
            tags:
              only: /^m[0-9]+(\.[0-9]+)?$/
      - frontend-unit-tests:
          requires:
            - frontend-lint
          filters:
            tags:
              only: /^m[0-9]+(\.[0-9]+)?$/
      - build-tarball:
          requires:
            - backend-unit-tests
            - frontend-unit-tests
          filters:
            branches:
              only:
                - master
      - build-docker-image:
          requires:
            - backend-unit-tests
            - frontend-unit-tests
          filters:
            branches:
              only:
                - master
      - build-docker-image-rc:
          requires:
            - backend-unit-tests
            - frontend-unit-tests
          filters:
            branches:
              only:
                - release
      - build-docker-image-tag:
          requires:
            - backend-unit-tests
            - frontend-unit-tests
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^m[0-9]+(\.[0-9]+)?$/
